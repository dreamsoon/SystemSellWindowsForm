//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataModelLayer.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AutomationNewEntities : DbContext
    {
        public AutomationNewEntities()
            : base("name=AutomationNewEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<VW_Users> VW_Users { get; set; }
        public virtual DbSet<Remembers> Remembers { get; set; }
        public virtual DbSet<VW_Remembers> VW_Remembers { get; set; }
        public virtual DbSet<UserLog> UserLog { get; set; }
        public virtual DbSet<VW_UserLog> VW_UserLog { get; set; }
        public virtual DbSet<Jobs> Jobs { get; set; }
        public virtual DbSet<VW_Jobs> VW_Jobs { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<UsersJobs> UsersJobs { get; set; }
        public virtual DbSet<VW_UserJobs> VW_UserJobs { get; set; }
        public virtual DbSet<AtachFile> AtachFile { get; set; }
        public virtual DbSet<Letters> Letters { get; set; }
        public virtual DbSet<VW_Letters> VW_Letters { get; set; }
        public virtual DbSet<VW_ReciveLetter> VW_ReciveLetter { get; set; }
        public virtual DbSet<Note> Note { get; set; }
        public virtual DbSet<SenNote> SenNote { get; set; }
        public virtual DbSet<VW_Note> VW_Note { get; set; }
        public virtual DbSet<VW_ReciveNote> VW_ReciveNote { get; set; }
        public virtual DbSet<VW_SendNote> VW_SendNote { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<VW_News> VW_News { get; set; }
        public virtual DbSet<VW_RefUser> VW_RefUser { get; set; }
        public virtual DbSet<Refrences> Refrences { get; set; }
        public virtual DbSet<VW_Refrence> VW_Refrence { get; set; }
        public virtual DbSet<VW_RerfrenceF> VW_RerfrenceF { get; set; }
        public virtual DbSet<VW_RefrenceT> VW_RefrenceT { get; set; }
        public virtual DbSet<SystemPart> SystemPart { get; set; }
        public virtual DbSet<VW_SystemPart> VW_SystemPart { get; set; }
        public virtual DbSet<UserAccess> UserAccess { get; set; }
        public virtual DbSet<VW_LetterWhitSignutre> VW_LetterWhitSignutre { get; set; }
        public virtual DbSet<SendLetter> SendLetter { get; set; }
    
        public virtual int sp_Insert_Users(string userFirstName, string userFamily, string userUserName, string userPassword, string userPersonalCode, Nullable<byte> userGender, string userEmail, Nullable<byte> userActivity, string userTell, byte[] userImage, string useCreateDate, byte[] userSignutre, string userBirthday)
        {
            var userFirstNameParameter = userFirstName != null ?
                new ObjectParameter("UserFirstName", userFirstName) :
                new ObjectParameter("UserFirstName", typeof(string));
    
            var userFamilyParameter = userFamily != null ?
                new ObjectParameter("UserFamily", userFamily) :
                new ObjectParameter("UserFamily", typeof(string));
    
            var userUserNameParameter = userUserName != null ?
                new ObjectParameter("UserUserName", userUserName) :
                new ObjectParameter("UserUserName", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            var userPersonalCodeParameter = userPersonalCode != null ?
                new ObjectParameter("UserPersonalCode", userPersonalCode) :
                new ObjectParameter("UserPersonalCode", typeof(string));
    
            var userGenderParameter = userGender.HasValue ?
                new ObjectParameter("UserGender", userGender) :
                new ObjectParameter("UserGender", typeof(byte));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userActivityParameter = userActivity.HasValue ?
                new ObjectParameter("UserActivity", userActivity) :
                new ObjectParameter("UserActivity", typeof(byte));
    
            var userTellParameter = userTell != null ?
                new ObjectParameter("UserTell", userTell) :
                new ObjectParameter("UserTell", typeof(string));
    
            var userImageParameter = userImage != null ?
                new ObjectParameter("UserImage", userImage) :
                new ObjectParameter("UserImage", typeof(byte[]));
    
            var useCreateDateParameter = useCreateDate != null ?
                new ObjectParameter("UseCreateDate", useCreateDate) :
                new ObjectParameter("UseCreateDate", typeof(string));
    
            var userSignutreParameter = userSignutre != null ?
                new ObjectParameter("UserSignutre", userSignutre) :
                new ObjectParameter("UserSignutre", typeof(byte[]));
    
            var userBirthdayParameter = userBirthday != null ?
                new ObjectParameter("UserBirthday", userBirthday) :
                new ObjectParameter("UserBirthday", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Insert_Users", userFirstNameParameter, userFamilyParameter, userUserNameParameter, userPasswordParameter, userPersonalCodeParameter, userGenderParameter, userEmailParameter, userActivityParameter, userTellParameter, userImageParameter, useCreateDateParameter, userSignutreParameter, userBirthdayParameter);
        }
    
        public virtual int sp_Update_Users(Nullable<int> userID, string userFirstName, string userFamily, string userPersonalCode, Nullable<byte> userGender, string userEmail, string userTell, byte[] userImage, string userBirthday)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userFirstNameParameter = userFirstName != null ?
                new ObjectParameter("UserFirstName", userFirstName) :
                new ObjectParameter("UserFirstName", typeof(string));
    
            var userFamilyParameter = userFamily != null ?
                new ObjectParameter("UserFamily", userFamily) :
                new ObjectParameter("UserFamily", typeof(string));
    
            var userPersonalCodeParameter = userPersonalCode != null ?
                new ObjectParameter("UserPersonalCode", userPersonalCode) :
                new ObjectParameter("UserPersonalCode", typeof(string));
    
            var userGenderParameter = userGender.HasValue ?
                new ObjectParameter("UserGender", userGender) :
                new ObjectParameter("UserGender", typeof(byte));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userTellParameter = userTell != null ?
                new ObjectParameter("UserTell", userTell) :
                new ObjectParameter("UserTell", typeof(string));
    
            var userImageParameter = userImage != null ?
                new ObjectParameter("UserImage", userImage) :
                new ObjectParameter("UserImage", typeof(byte[]));
    
            var userBirthdayParameter = userBirthday != null ?
                new ObjectParameter("UserBirthday", userBirthday) :
                new ObjectParameter("UserBirthday", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_Users", userIDParameter, userFirstNameParameter, userFamilyParameter, userPersonalCodeParameter, userGenderParameter, userEmailParameter, userTellParameter, userImageParameter, userBirthdayParameter);
        }
    
        public virtual int sp_Update_Users_NoImage(Nullable<int> userID, string userFirstName, string userFamily, string userPersonalCode, Nullable<byte> userGender, string userEmail, string userTell, string userBirthday)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userFirstNameParameter = userFirstName != null ?
                new ObjectParameter("UserFirstName", userFirstName) :
                new ObjectParameter("UserFirstName", typeof(string));
    
            var userFamilyParameter = userFamily != null ?
                new ObjectParameter("UserFamily", userFamily) :
                new ObjectParameter("UserFamily", typeof(string));
    
            var userPersonalCodeParameter = userPersonalCode != null ?
                new ObjectParameter("UserPersonalCode", userPersonalCode) :
                new ObjectParameter("UserPersonalCode", typeof(string));
    
            var userGenderParameter = userGender.HasValue ?
                new ObjectParameter("UserGender", userGender) :
                new ObjectParameter("UserGender", typeof(byte));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userTellParameter = userTell != null ?
                new ObjectParameter("UserTell", userTell) :
                new ObjectParameter("UserTell", typeof(string));
    
            var userBirthdayParameter = userBirthday != null ?
                new ObjectParameter("UserBirthday", userBirthday) :
                new ObjectParameter("UserBirthday", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Update_Users_NoImage", userIDParameter, userFirstNameParameter, userFamilyParameter, userPersonalCodeParameter, userGenderParameter, userEmailParameter, userTellParameter, userBirthdayParameter);
        }
    
        public virtual int SP_Update_ExitDateTime(Nullable<int> userID, string exitDateTime)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var exitDateTimeParameter = exitDateTime != null ?
                new ObjectParameter("ExitDateTime", exitDateTime) :
                new ObjectParameter("ExitDateTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Update_ExitDateTime", userIDParameter, exitDateTimeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<SP_ShowUserAllInfo_Result> SP_ShowUserAllInfo(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ShowUserAllInfo_Result>("SP_ShowUserAllInfo", userIDParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SP_ShowUserAllInfo1_Result> SP_ShowUserAllInfo1(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ShowUserAllInfo1_Result>("SP_ShowUserAllInfo1", userIDParameter);
        }
    
        public virtual int sp_Del_UserAccess(Nullable<int> userID, Nullable<int> systemPartID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var systemPartIDParameter = systemPartID.HasValue ?
                new ObjectParameter("SystemPartID", systemPartID) :
                new ObjectParameter("SystemPartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Del_UserAccess", userIDParameter, systemPartIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LetterCount(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LetterCount", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> letterCountt(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("letterCountt", userIDParameter);
        }
    
        public virtual int setstatus(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setstatus", userIDParameter);
        }
    }
}
